@using MovieCentral.Client.Features.UserProfile
@using MovieCentral.Client.Features.UserProfile.Store
@using MovieCentral.Client.Features.WatchList
@using MovieCentral.Client.Features.WatchList.Store
@implements IDisposable
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IState<UserProfileState> UserProfileState 
@inject IState<WatchListState> WatchListState
@inject WatchListFacade WatchListFacade
@inject UserProfileFacade UserProfileFacade

@ChildContent

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    // The event can trigger multiple times when being redirected from the Authentication page to wherever you're going.
    public bool hasRunInit;

    protected override async Task OnInitializedAsync()
    {
        _authenticationStateProvider.AuthenticationStateChanged += this.OnAuthenticationStateChanged;

        await LoadUserProfile(_authenticationStateProvider.GetAuthenticationStateAsync());
    }

    private async Task LoadUserProfile(Task<AuthenticationState> task)
    {
        var user = (await task).User;

        if (user.Identity.IsAuthenticated && !UserProfileState.Value.IsLoggedIn && !hasRunInit)
        {
            hasRunInit = true;

            UserProfileFacade.Load(user.Identity.Name);

            if (WatchListState.Value.FetchState == FetchState.None)
            {
                WatchListFacade.Load();
            }
        }
        else if (!user.Identity.IsAuthenticated && UserProfileState.Value.IsLoggedIn)
        {
            UserProfileFacade.Logout();
        }
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task) => await LoadUserProfile(task);

    public void Dispose() => _authenticationStateProvider.AuthenticationStateChanged -= this.OnAuthenticationStateChanged;
}
