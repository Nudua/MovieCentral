@page "/watchlist"
@using Microsoft.AspNetCore.Authorization
@using MovieCentral.Shared.Dtos.WatchList
@using System.ComponentModel.DataAnnotations
@implements IDisposable
@inject ISnackbar Snackbar
@inject IState<WatchListState> WatchListState
@inject IState<UserProfileState> UserProfileState
@inject WatchListFacade Facade
@attribute [Authorize]

<PageTitle>@UserProfileState.Value.NickName's Watchlist</PageTitle>

<MudText Align="Align.Center" Typo="Typo.h2">@($"{UserProfileState.Value.NickName}'s Watchlist")</MudText>

@if (WatchListState.Value.FetchState == FetchState.Success)
{
    @if (WatchListState.Value.Movies.Count == 0)
    {
        <MudText Typo="Typo.body1">You haven't added any movies to your watchlist yet.</MudText>
    }
    else
    {
        <div class="d-flex flex-column align-center mb-4">
		    <MudSelect Class="pb-4" Style="width:200px;" T="SortOrder" Label="Sort by" Value="_sortOrder" ValueChanged="UpdateSort">
			    @foreach (var sortOrder in Enum.GetValues<SortOrder>())
			    {
				    <MudSelectItem Value="sortOrder">@sortOrder.GetDisplayName()</MudSelectItem>
			    }
		    </MudSelect>
	    </div>

        <MudGrid Justify="Justify.Center">
        @foreach (var watchListItem in _orderedWatchList)
        {
            <MudItem Style="width:400px;">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1">@watchListItem.Title</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton @onclick="() => RemoveFavoriteMovie(watchListItem)" Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardMedia Image="@watchListItem.CoverUrl" Height="500" />
                    <MudCardContent>
                        <MudText Typo="Typo.body1">Ranking: @watchListItem.Ranking</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
    }
}
else if (WatchListState.Value.FetchState == FetchState.Loading)
{
    <MudProgressCircular Indeterminate="true">Loading watchlist...</MudProgressCircular>
}
else
{
    <MudAlert Severity="Severity.Error">Unable to load watchlist from Api</MudAlert>
}

@code {
    private enum SortOrder
    {
        [Display(Name = "Recently Added")]
        AddedDate,

        [Display(Name = "Top Rated")]
        Ranking,

        [Display(Name = "A-Z")]
        Title
    }

    private IEnumerable<WatchListItemDto> _orderedWatchList;
    private SortOrder _sortOrder = SortOrder.AddedDate;

    protected override void OnInitialized()
    {
        if (WatchListState.Value.FetchState != Client.Store.FetchState.Success)
        {
            Facade.Load();
        }

        if (WatchListState.Value.Movies is not null)
        {
            UpdateSort(SortOrder.AddedDate);
        }

        WatchListState.StateChanged += OnMovieStateChanged;
    }

    private void UpdateSort(SortOrder order)
    {
        var movies = WatchListState.Value.Movies;

        _orderedWatchList = order switch
        {
            SortOrder.AddedDate => movies.OrderByDescending(x => x.Added),
            SortOrder.Title => movies.OrderBy(x => x.Title),
            SortOrder.Ranking => movies.OrderBy(x => x.Ranking),
            _ => movies
        };

        _sortOrder = order;
    }

    public void RemoveFavoriteMovie(WatchListItemDto item)
    {
        Facade.RemoveMovie(item.MovieId);
        Snackbar.Add($"{item.Title} was removed from your watchlist.", Severity.Warning);
    }

    public void OnMovieStateChanged(object sender, EventArgs args) 
    { 
        if (WatchListState.Value.FetchState == Client.Store.FetchState.Success)
        {
            UpdateSort(_sortOrder);
        }

        StateHasChanged();
    }

    public void Dispose() => WatchListState.StateChanged -= OnMovieStateChanged;
}
